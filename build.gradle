plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'java'
    id 'maven-publish'
}

group = 'notquests'
version = '1.5.8'

repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://papermc.io/repo/repository/maven-public/'
    }
    maven {
        name = 'spigot repo (bstats)'
        url = 'https://hub.spigotmc.org/nexus/content/groups/public/'
        content {
            includeGroup 'org.spigotmc'
        }
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'citizens'
        url = 'https://repo.citizensnpcs.co/'
        content {
            includeGroup 'net.citizensnpcs'
        }
    }
    maven {
        name = 'placeholderapi'
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'

        content {
            includeGroup 'me.clip'
        }
    }
    maven {
        name = 'vault'
        url = 'https://jitpack.io'
        content {
            includeGroup 'com.github.MilkBowl'
        }
    }
    maven {
        name = 'inventorygui (minebench)'
        url = 'https://repo.minebench.de/'
        content {
            includeGroup 'de.themoep'
        }
    }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
        content {
            includeGroup 'net.kyori'
        }
    }
    maven {
        url 'https://mvn.lumine.io/repository/maven-public/'
        content {
            includeGroup 'io.lumine.xikage'
        }
    }
    maven {
        url 'https://betonquest.org/nexus/repository/betonquest/'
        content {
            includeGroup 'org.betonquest'
        }
        metadataSources {
            artifact()
        }
    }

    maven {
        url 'https://maven.enginehub.org/repo/'
        content {
            includeGroup 'com.sk89q.worldedit'
        }
        metadataSources {
            artifact()
        }
    }

    maven { url 'https://jitpack.io' }
}

dependencies {
    //compileOnly 'io.papermc.paper:paper-api:1.17.1-R0.1-SNAPSHOT'
    compileOnly 'org.spigotmc:spigot-api:1.17.1-R0.1-SNAPSHOT'
    //does not work  implementation "net.kyori:adventure-platform-bukkit:4.0.0"
    implementation 'org.bstats:bstats-bukkit:2.2.1'
    compileOnly 'net.citizensnpcs:citizens-main:2.0.28-SNAPSHOT'
    compileOnly 'me.clip:placeholderapi:2.10.10'
    compileOnly 'com.github.MilkBowl:VaultAPI:1.7'
    implementation 'de.themoep:inventorygui:1.5-SNAPSHOT'
    implementation 'commons-io:commons-io:2.11.0'

    implementation 'io.lumine.xikage:MythicMobs:4.12.0'
    compileOnly files('libs/EliteMobs.jar')

    compileOnly 'org.betonquest:betonquest:2.0.0-SNAPSHOT'

    compileOnly 'com.sk89q.worldedit:worldedit-core:7.3.0-SNAPSHOT'
    compileOnly 'com.sk89q.worldedit:worldedit-bukkit:7.3.0-SNAPSHOT'

    //Shaded
    implementation 'io.papermc:paperlib:1.0.6'
    implementation "net.kyori:adventure-text-minimessage:4.2.0-SNAPSHOT"
    implementation 'net.kyori:adventure-platform-bukkit:4.0.0'

}

/**
 * Configure NotQuests for shading
 */
shadowJar {
    minimize()
    relocate 'io.papermc.lib', 'rocks.gravili.shaded.paper'
    relocate 'net.kyori', 'rocks.gravili.shaded.kyori'
    relocate("org.bstats", "rocks.gravili.shaded.bstats")

    dependencies {
        include(dependency('io.papermc:paperlib'))
        include dependency("de.themoep:inventorygui:1.5-SNAPSHOT")
        include dependency('commons-io:')
        include dependency('org.bstats:')
        include(dependency('net.kyori:'))
    }

    dependencies {
        relocate("de.themoep", "rocks.gravili.shaded.de.themoep")
        //relocate("org.bstats.bukkit", "rocks.gravili.shaded.bstats.bukkit")
        //relocate("org.bstats", "rocks.gravili.shaded.bstats")
        relocate("commons.io", "rocks.gravili.shaded.commons.io")

    }





    archiveClassifier.set(null)


}


def targetJavaVersion = 16
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = 17
    targetCompatibility = 16
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
        options.encoding = "UTF-8"
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
